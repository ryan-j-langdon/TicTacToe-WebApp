@namespace TicTacToe.Components
@using TicTacToe.Logic
@inject AppState app
@inject GameState state

<h2 id="gameState">
    @if (state.tie)
    {
        <span>The game is a tie!</span>
    }
    else if (state.winner != '\0')
    {
        <span><span class="@state.winner">@state.winner</span> has won!</span>
    }
    else
    {
        <span>It is <span class="@state.currentPlayer">@state.currentPlayer</span>'s turn:</span>
    }
</h2>

<div id="gameBoard">
    @for (var i = 0; i < 9; i++)
    {
        int index = i;
        <div class="cell @GetCellClass(index)" id="@index" @onclick="() => state.PlayMove(index)">
            @if (state.board[i] != '\0')
            {
                @state.board[i]
            }
        </div>
    }
</div>

@code
{
    // Rerender if the game state is changed from elsewhere
    protected override void OnInitialized()
    {
        state.OnBoardChanged += StateHasChanged;
    }
    
    // Adds tags to a cells class to control visual logic
    string GetCellClass(int index)
    {
        List<string> classes = new();

        if (state.board[index] != '\0') classes.Add("occupied");
        if (state.board[index] == 'O') classes.Add("O");
        if (state.board[index] == 'X') classes.Add("X");
        if (state.gameOver || !state.interactable) classes.Add("no-hover");
        if (state.winningCells?.Contains(index) == true) classes.Add("winning");
        
        return string.Join(" ", classes);
    }
}