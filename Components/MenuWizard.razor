@page "/"
@namespace TicTacToe.Components
@using TicTacToe.Logic
@inject AppState app
@inject GameState state
@inject Opponent opponent

@if (app.currentView == AppState.View.ModeSelect)
{
    <h2 class="heading">Select Game Mode</h2>
    <div class="container">
        <Button id="multiplayerButton" OnClick="MultiplayerButton">Multiplayer</Button>
        <Button id="versusAIButton" OnClick="VersusAIButton">Versus AI</Button>
    </div>
}

@if (app.currentView == AppState.View.DifficultySelect)
{
    <h2 class="heading">Select Difficulty</h2>
    <div class="container">
        <Button OnClick="() => SetDifficulty(Opponent.Difficulty.Easy)">Easy</Button>
        <Button OnClick="() => SetDifficulty(Opponent.Difficulty.Medium)">Medium</Button>
        <Button OnClick="() => SetDifficulty(Opponent.Difficulty.Hard)">Hard</Button>
        <Button OnClick="() => SetDifficulty(Opponent.Difficulty.Impossible)">Impossible</Button>
        <Button style="background-color: grey; margin-top: 20px;"
            OnClick="() => app.currentView = AppState.View.ModeSelect">Back</Button>
    </div>
}

@if (app.currentView == AppState.View.TurnOrderSelect)
{
    <h2 class="heading">Select Your Pieces</h2>
    <div class="container">
        <Button OnClick="() => SetPlayerPieces('X')">X (first)</Button>
        <Button OnClick="() => SetPlayerPieces('O')">O (second)</Button>
        <Button OnClick="() => SetPlayerPieces('\0')">Random</Button>
        <Button style="background-color: grey; margin-top: 20px;"
            OnClick="() => app.currentView = AppState.View.DifficultySelect">Back</Button>
    </div>
}

@if (app.currentView == AppState.View.GameBoard)
{
    <MainPage />
}

@code
{
    // Rerender if the view is changed from elsewhere
    protected override void OnInitialized()
    {
        app.OnViewChanged += StateHasChanged;
    }

    private void MultiplayerButton()
    {
        app.currentView = AppState.View.GameBoard;
        SetMode(GameState.Gamemode.Multiplayer);
    }

    private void VersusAIButton()
    {
        app.currentView = AppState.View.DifficultySelect;
        SetMode(GameState.Gamemode.AI_Opponent);
    }

    private void SetMode(GameState.Gamemode mode)
    {
        state.currentGamemode = mode;
    }

    private void SetDifficulty(Opponent.Difficulty diff)
    {
        opponent.currentDifficulty = diff;
        app.currentView = AppState.View.TurnOrderSelect;
    }
    
    private void SetPlayerPieces(char playerPieces)
    {
        if (playerPieces == '\0')
        {
            state.randomizePieces =  true;
            Random random = new Random();
            state.humanPlayer = random.Next(2) == 0 ? 'X' : 'O';
        }
        else
        {
            state.humanPlayer = playerPieces;
        }
        app.currentView = AppState.View.GameBoard;
        
        // AI should take a turn first if the human player goes second
        if (state.currentGamemode == GameState.Gamemode.AI_Opponent && state.humanPlayer == 'O')
        {
            Task.Run(state.OpponentTurn);
        }
    }

}
